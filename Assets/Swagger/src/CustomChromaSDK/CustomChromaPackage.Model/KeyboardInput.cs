/* 
 * Chroma Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace CustomChromaSDK.CustomChromaPackage.Model
{
    /// <summary>
    /// JSON Data
    /// </summary>
    [DataContract]
    public partial class KeyboardInput :  IEquatable<KeyboardInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyboardInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KeyboardInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyboardInput" /> class.
        /// </summary>
        /// <param name="Effect">Effect (required).</param>
        /// <param name="Param">2 dimensional array of size 6 rows by 22 columns. Each cell contains the color value in BGR format.</param>
        /// <param name="Color">6 by 22 columns of array containing the value of color in BGR format.</param>
        /// <param name="Key">6 by 22 columns of array containing the value of color on the specific key at the location in BGR format. Specify a bit mask of 0x01000000 with the color value for each keys that has an effect..</param>
        public KeyboardInput(EffectType Effect = default(EffectType), List<List<int?>> Param = default(List<List<int?>>), List<int?> Color = default(List<int?>), List<int?> Key = default(List<int?>))
        {
            // to ensure "Effect" is required (not null)
            if (Effect == null)
            {
                throw new InvalidDataException("Effect is a required property for KeyboardInput and cannot be null");
            }
            else
            {
                this.Effect = Effect;
            }
            this.Param = Param;
            this.Color = Color;
            this.Key = Key;
        }
        
        /// <summary>
        /// Gets or Sets Effect
        /// </summary>
        [DataMember(Name="effect")]
		[JsonProperty(PropertyName = "effect")]
        public EffectType Effect { get; set; }
        /// <summary>
        /// 2 dimensional array of size 6 rows by 22 columns. Each cell contains the color value in BGR format
        /// </summary>
        /// <value>2 dimensional array of size 6 rows by 22 columns. Each cell contains the color value in BGR format</value>
        [DataMember(Name="param")]
		[JsonProperty(PropertyName = "param")]
        public List<List<int?>> Param { get; set; }
        /// <summary>
        /// 6 by 22 columns of array containing the value of color in BGR format
        /// </summary>
        /// <value>6 by 22 columns of array containing the value of color in BGR format</value>
        [DataMember(Name="color")]
		[JsonProperty(PropertyName = "color")]
        public List<int?> Color { get; set; }
        /// <summary>
        /// 6 by 22 columns of array containing the value of color on the specific key at the location in BGR format. Specify a bit mask of 0x01000000 with the color value for each keys that has an effect.
        /// </summary>
        /// <value>6 by 22 columns of array containing the value of color on the specific key at the location in BGR format. Specify a bit mask of 0x01000000 with the color value for each keys that has an effect.</value>
        [DataMember(Name="key")]
		[JsonProperty(PropertyName = "key")]
        public List<int?> Key { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeyboardInput {\n");
            sb.Append("  Effect: ").Append(Effect).Append("\n");
            sb.Append("  Param: ").Append(Param).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as KeyboardInput);
        }

        /// <summary>
        /// Returns true if KeyboardInput instances are equal
        /// </summary>
        /// <param name="other">Instance of KeyboardInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeyboardInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Effect == other.Effect ||
                    this.Effect != null &&
                    this.Effect.Equals(other.Effect)
                ) && 
                (
                    this.Param == other.Param ||
                    this.Param != null &&
                    this.Param.SequenceEqual(other.Param)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.SequenceEqual(other.Color)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.SequenceEqual(other.Key)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Effect != null)
                    hash = hash * 59 + this.Effect.GetHashCode();
                if (this.Param != null)
                    hash = hash * 59 + this.Param.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                return hash;
            }
        }
    }

}
