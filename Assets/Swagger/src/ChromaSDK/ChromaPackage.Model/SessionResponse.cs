/* 
 * Chroma Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ChromaSDK.ChromaPackage.Model
{
    /// <summary>
    /// SessionResponse
    /// </summary>
    [DataContract]
    public partial class SessionResponse :  IEquatable<SessionResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionResponse" /> class.
        /// </summary>
        /// <param name="Sessionid">Sessionid.</param>
        /// <param name="Url">Url.</param>
        public SessionResponse(string Sessionid = default(string), string Url = default(string))
        {
            this.Sessionid = Sessionid;
            this.Url = Url;
        }
        
        /// <summary>
        /// Gets or Sets Sessionid
        /// </summary>
        [DataMember(Name="sessionid")]
		[JsonProperty(PropertyName = "sessionid")]
        public string Sessionid { get; set; }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url")]
		[JsonProperty(PropertyName = "url")]
        public string Url { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionResponse {\n");
            sb.Append("  Sessionid: ").Append(Sessionid).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SessionResponse);
        }

        /// <summary>
        /// Returns true if SessionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Sessionid == other.Sessionid ||
                    this.Sessionid != null &&
                    this.Sessionid.Equals(other.Sessionid)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Sessionid != null)
                    hash = hash * 59 + this.Sessionid.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                return hash;
            }
        }
    }

}
